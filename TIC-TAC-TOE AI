#include <iostream>
#include <vector>
#include <limits>
using namespace std;

const char PLAYER = 'X';  // Human player
const char AI = 'O';      // AI player
const char EMPTY = ' ';

// Function to print the game board
void printBoard(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << "\n";
        if (i < 2) cout << "---------\n";
    }
}

// Function to check if there are moves left
bool isMovesLeft(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == EMPTY)
                return true;
    return false;
}

// Function to evaluate the board
int evaluate(const vector<vector<char>>& board) {
    // Check rows and columns for a winner
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
            if (board[i][0] == AI) return 10;
            if (board[i][0] == PLAYER) return -10;
        }
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
            if (board[0][i] == AI) return 10;
            if (board[0][i] == PLAYER) return -10;
        }
    }

    // Check diagonals for a winner
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == AI) return 10;
        if (board[0][0] == PLAYER) return -10;
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == AI) return 10;
        if (board[0][2] == PLAYER) return -10;
    }

    // No winner
    return 0;
}

// Minimax algorithm
int minimax(vector<vector<char>>& board, int depth, bool isMax) {
    int score = evaluate(board);

    // If AI has won
    if (score == 10) return score - depth;

    // If player has won
    if (score == -10) return score + depth;

    // If no moves are left (draw)
    if (!isMovesLeft(board)) return 0;

    if (isMax) {
        int best = numeric_limits<int>::min();

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = AI;
                    best = max(best, minimax(board, depth + 1, false));
                    board[i][j] = EMPTY;
                }
            }
        }
        return best;
    } else {
        int best = numeric_limits<int>::max();

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER;
                    best = min(best, minimax(board, depth + 1, true));
                    board[i][j] = EMPTY;
                }
            }
        }
        return best;
    }
}

// Find the best move for the AI
pair<int, int> findBestMove(vector<vector<char>>& board) {
    int bestVal = numeric_limits<int>::min();
    pair<int, int> bestMove = {-1, -1};

    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == EMPTY) {
                board[i][j] = AI;
                int moveVal = minimax(board, 0, false);
                board[i][j] = EMPTY;

                if (moveVal > bestVal) {
                    bestMove = {i, j};
                    bestVal = moveVal;
                }
            }
        }
    }
    return bestMove;
}

// Main function to play the game
int main() {
    vector<vector<char>> board(3, vector<char>(3, EMPTY));
    cout << "Welcome to Tic-Tac-Toe! You are 'X', and the AI is 'O'.\n";

    while (true) {
        printBoard(board);

        // Check if the game is over
        if (evaluate(board) == 10) {
            cout << "AI wins! Better luck next time.\n";
            break;
        }
        if (evaluate(board) == -10) {
            cout << "Congratulations! You win!\n";
            break;
        }
        if (!isMovesLeft(board)) {
            cout << "It's a draw!\n";
            break;
        }

        // Player move
        int row, col;
        cout << "Enter your move (row and column: 0, 1, or 2): ";
        cin >> row >> col;
        if (board[row][col] == EMPTY) {
            board[row][col] = PLAYER;
        } else {
            cout << "Invalid move! Try again.\n";
            continue;
        }

        // AI move
        if (isMovesLeft(board)) {
            pair<int, int> aiMove = findBestMove(board);
            board[aiMove.first][aiMove.second] = AI;
        }
    }

    printBoard(board);
    return 0;
}
